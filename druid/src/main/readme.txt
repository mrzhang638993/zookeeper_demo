druid:olAp对应的的时一个大数据分析的数据库的。
hbase:列式数据库。只是适合实时查询操作的。
mysql,hbase,redis等都是可以特色的操作的。
druib：针对的时时间序列的，低延迟的，快速交互式的查询操作的。可以满足实时的查询和实时的数据的插入操作实现的。
es:在大量的数据的查询操作的时候性能时特别的优异的，但是在大量数据的操作的情况下是会消耗很多的时间的。
大数据的情况下，对于数据的查询操作时很多的，基本上时不涉及删除和修改操作的，操作的重点时分析操作的。
oltp:注重的时对于数据的增删改的操作的，对于查询的操作以及分析操作是很少的。
hive/sparksql：注重离线分析操作的，数据的实时性的很差的。离线分析延时性比较的高的，很难满足毫秒级甚至秒级的要求的。hive/sparksql适用于离线分析操作实现的。hive底层对应的时maprecuce的操作的
sparksql在hive的基础上进行了优化，但是性能还是存在很大的问题的。
es:在时效性和查询延时的效果时很好的，数据量在中等规模的时候性能时比较的优秀的，但是在万亿甚至更大的数据级别的情况下，性能存在很大的问题的。
kylin以及druib等的操作的话，druib支持数据的实时导入操作的。统计分析的时候需要得到实时的数据结果的，数据的实时插入的话，对应的存在可以使用druid的分布式数据库的。

#数据新增
curl -X 'POST' -H 'Content-Type:application/json' -d @quickstart/wikiticker-index.json hp101:8090/druid/indexer/v1/task
#数据查询操作
curl -X 'POST'  -H'Content-Type: application/json'  -d @quickstart/wikiticker-top-pages.json http://hp101:8082/druid/v2/?pretty


druid会对应数据进行聚合rollup集合操作的，在导入数据的时候已经进行了rollup聚合操作的。所以，查询明细数据是存在陷阱的。
需要查询明细数据的话，需要关闭rollup操作的，性能会有影响的。对于大数据的分析是可以实现的。


列式存储的性能问题：
1.行式存储的特征：可以方便的获取到数据和对应的关联数据的。
2.列式存储：每一列对应的是一个文件的。可以单独针对于一个列的数据执行压缩优化操作的。一列的数据类型是一样的，可以很好的执行压缩操作的。
查询的时候只需要按需求取得对应的列信息的，还有可以执行压缩节省压缩空间的。
3.datasource以及segment操作实现：

数据切分的越小，查询的粒度越精确的话，对应的查询的效率更加的高的。
druib的位图索引：适用位图索引操作。大数据层面常见的使用的是位图索引的。
mysql的查询速度加快，添加索引对应的是添加了数据结构的，这样的话提高查询性能的速度是会提高的。mysql常见的适用的是B+tree的，b+树的叶子是比较的少的，有时候查询的性能还赶不上全表扫描的。
druib对应的采用位图索引的方式提高了查询效率的。根据维度数据构建了位图索引操作的。
hbase存储的数据是存储在hdfs上的，druib是支持批量导入和实时导入功能的。
druid的架构搭建操作需要重点的学习和理解操作实现的。需要进行关注操作和实现的。
overload对应的更加像yarn那样的资源调度工具的。

druid的相关的操作类似于es操作实现的，定义json描述相关的操作实现。json定义了查询的维度数据。
json的属性值秒数的是操作的类型信息的。读取json的数值既可以实现对应的数据查询操作的。
granularity:指定聚合的维度，


对外提供相对而言较为复杂查询的数据库包括es，druid等对应的都是采用的是json格式指明所有的选项的，
json中的各个部分规定了查询的主题和执行的操作的，sql语句可以看做是json格式查询的高级形式的操作的。
相对而言一般的提供的低级的查询操作对应的是json格式的操作的，高级的查询操作对应的是sql语句的查询操作实现。

druid只要的操作对应的类似于restful的操作风格的，使用rest进行请求的发送和处理操作的。
druid使用来进行广告数据的场景操作和实现管理。

