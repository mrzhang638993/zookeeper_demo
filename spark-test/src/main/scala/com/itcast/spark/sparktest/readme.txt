出租车的要点：
1.根据出租车上下坐标点的位置需要计算出来对应的行政区域的名称；
需要使用到geoJson处理坐标的？
2.需要区分每一个车辆的一次的阶段，包括载客开始和载客结束的时间点
需要进行session划分操作？
3.需要计算连续两次的载客过程中的间隔操作。也就是等待时间
需要确认是同一个人的连续的上车时间和下车时间的。
4.根据得到的区域和对应的每一次的出租的等到时间，得到区域的名称和平均的载客时间间隔的。
5.数据的过滤和清洗操作？设计到大量的ETL的过程和相关的实际操作实现的。
##### 流式计算的操作和实现的
sparkStreaming 对应的是早期的流式计算的操作的。
structuredStreaming对应的是最新的流式计算的操作点的。
流计算的应用场景和流计算的架构设置的？
流计算和批量计算以及离线计算的区别：
1.批量计算:数据已经存在,使用spark等的操作最终将文件存储到hdfs上面去的操作的。要求的是数据量比较大的。
批量计算的目标往往是形成数据仓库的。指标预测等的场景就可以使用redis的数据的。
批量计算对应的是离线计算的。数据是确定的。批量计算往往会计算全量的数据的。处理的是全量数据的。
2.流式计算:数据是源源不断的产生的。经过处理之后数据落地的。外部可以使用图形化的webui来展示相关的技术指标的。
要求快速处理的，处理的是增量数据的。
流式计算可以将数据存储到hbase以及
流式计算的架构和批处理的架构整合在一起称之为流式计算架构。称之为lamada架构。现阶段的架构很难维护，现阶段很少使用的
需要维护流式架构和批处理架构的。一般的是流式架构就是流式架构的，一般的批处理架构对应的采用的是批处理架构的。
流式架构在大规模的处理上面的性能比较的差的。很少使用的。流式计算是少量数据处理的。
批量计算对应的也称之为离线计算的。是针对于批量数据进行操作处理的。
kafka可以处理流式数据和批处理数据的。
Cassandra数据库:无中心的架构的
hbase:有中心的架构的。
sparkStreaming是针对于spark core  api的处理的。是spark1.0的时代的产物的。
机器学习和图计算比较倾向于使用sparkStreaming进行计算的。spark  streaming对应的是微批次的处理操作的。
是将批次的数据转化为rdd的操作的，处理的是批量的操作处理的。是小批量的操作处理实现的。
socket是java支持tcp/Udp协议的编程模型的。socket支持tcp以及udp的操作的。
tcp保证连接的安全的。udp只是传递数据的，不保证数据的安全的。socket支持udp以及tcp的
socket编程模型包含了server部分以及client部分的。
socketserver被动接受client的链接操作的。比较常见的是tcp的。http底层也是基于tcp连接的。
tcp的连接过程
1.客户端发送请求到服务端，syn请求操作;
2.服务端发送客户端连接确认信息ack请求，同时还发送连接客户端的syn请求
3.客户端返回确认的ack连接请求。
zookeeper中存在4字命令，对应的是管理端的命令的。
netcat可以发送命令检测请求的。netcate的命令简称职位nc的操作的。
nc  -lk 9999  #创建socketServer
nc  localhost  9999  #连接端口对外提供服务操作。

sparkStreaming 实时计算uv指标数据需要执行如下的方案的：
1.用户信息的判别采用的是用户id,sessionId以及ip数据形成的一个整体来实现操作的
2.实现计算pv操作的话，需要将每一个用户key保存到redis中的。
使用redis的set集合保存对应的用户的key的数据的。这样的话,并且保证设置redis的失效时间是对应的第二天的开始的
set集合只会保存不重复的数据的。需要使用到大量的内存空间来使用的。这样的话redis的使用量是比较的大的
这样查询的时候直接从redis中获取就可以了。至于说前一天的总的记录的话,直接使用离线分析就可以得到批处理的结果的。
这样的话，流和批的处理结果得到了空前一致的处理结果的。
这样的话,首先是从redis中获取数据的，然后查询数据库的数据的。数据库的数据也是需要更新数据的
4.流式处理数据的话，数据的容错处理操作实现的。checkpoint机制需要保全的。
5.kafka的exactly-once的消费操作记录和实现机制,这个是需要考虑和维护的。
使用分区的手动提交可以保证exactly-once机制实现操作的。
将kafka的offset保存到redis中可以实现相关的操作的




